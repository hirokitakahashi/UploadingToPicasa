#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Nov 03 13:44:40 2009

import wx
import os
import sys
import time
import re
import pickle
from threading import *
import warnings
with warnings.catch_warnings():
	warnings.simplefilter("ignore")
	import upload2picasa 
import plotlog

# begin wxGlade: extracode
# end wxGlade

class LoginError(Exception):
	def __init__(self, value=None):
		self.value = value
	def __str__(self):
		return 'login failed'

EVT_MSG_ID = wx.NewId()

class MsgEvent(wx.PyEvent):
	"""Simple event to carry an arbitrary message."""
	def __init__(self, id, msg, data=None):
		"""Init Message Event."""
		wx.PyEvent.__init__(self)
		self.SetEventType(EVT_MSG_ID)
		self.id = id
		self.msg = msg

class UploadThread(Thread):
	State_Run = wx.NewId()
	State_Abort = wx.NewId()
	State_Term = wx.NewId()
	State_Run_Wait = wx.NewId()
	State_Run_Blank = wx.NewId()
	State_Run_Go = wx.NewId()
	
	Msg_Success = wx.NewId()
	Msg_Abort = wx.NewId()
	Msg_Error = wx.NewId()
	
	lock = Lock() # variable used as a lock
	restartEvt = Event()	# variable used as a flag
	
	def __init__(self, frame):
		Thread.__init__(self)
		self.frame = frame
		self.startTime = time.time()
		self.lastTime = self.startTime
		self.firstCall = True
		self._state = self.State_Run
		self.interval = self.frame.combo_box_1.GetValue()
		self.start()
		#self.frame.logging('New thread started')
	
	def run(self):
		while True:
			# if the thread is in running state 
			if self._state == self.State_Run:
				#self.frame.statusbar.SetStatusText('running')
				now, check = self.check_interval()
				if self.firstCall:
					if check == self.State_Run_Blank:
						self.abort()
					else:
						try:
							self.frame.UploadFile()
						except gdata.photos.service.GooglePhotosException:
							wx.PostEvent(self.frame, MsgEvent(self.Msg_Error, 'Uploading error'))
						else:
							wx.PostEvent(self.frame, MsgEvent(self.Msg_Success, 'File uploaded'))
							self.lastTime = now
							self.firstCall = False
				elif check == self.State_Run_Go:
					try:
						self.frame.UploadFile()
					except gdata.photos.service.GooglePhotosException:
						wx.PostEvent(self.frame, MsgEvent(self.Msg_Error, 'Uploading error'))
					else:
						wx.PostEvent(self.frame, MsgEvent(self.Msg_Success, 'File uploaded'))
						self.lastTime = now
				time.sleep(1)
			# if the thread is aborted
			elif self._state == self.State_Abort:
				wx.PostEvent(self.frame, MsgEvent(self.Msg_Abort, 'Aborted'))
				self.restartEvt.wait()
				continue
			# if the application is going to terminate
			elif self._state == self.State_Term:
				#wx.PostEvent(self.frame, MsgEvent(None))
				#self.frame.statusbar.SetStatusText('terminated')
				return
	
	def abort(self):
		if not self._state == self.State_Abort:
			self._state = self.State_Abort
			#self.frame.logging('Thread aborted')
			return
	
	def terminate(self):
		if self._state == self.State_Abort:
			self.restartEvt.set()
			self.restartEvt.clear()
		self._state = self.State_Term
		return
	
	def restart(self):
		if self._state == self.State_Abort:
			self._state = self.State_Run
			self.firstCall = True
			self.restartEvt.set()
			self.restartEvt.clear()
		elif self._state == self.State_Term:
			self._state = self.State_Run
			self.firstCall = True
			self.run()
	
	def check_interval(self):
		#interval = self.frame.combo_box_1.GetValue()
		interval = self.interval
		if interval == '':
			#self.frame.logging('Combo box is blank')
			#self.frame.logging('Next uploading is not scheduled')
			#self.abort()
			return (None, self.State_Run_Blank)
		now = time.time()
		if now > self.lastTime + 60*int(interval):
			return (now, self.State_Run_Go)
		else:
			return (now, self.State_Run_Wait)
	
			
class MainFrame(wx.Frame):
	picklefile = 'uploadGUI.pickle'
	def __init__(self, *args, **kwds):
		# begin wxGlade: MainFrame.__init__
		kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.CLIP_CHILDREN
		wx.Frame.__init__(self, *args, **kwds)
		self.statusbar = self.CreateStatusBar(1, 0)
		self.label_datafile = wx.StaticText(self, -1, "data file: ")
		self.text_ctrl_datafile = wx.TextCtrl(self, -1, "")
		self.button_datafile = wx.Button(self, -1, "open")
		self.label_graphfile = wx.StaticText(self, -1, "graph file: ")
		self.text_ctrl_graphfile = wx.TextCtrl(self, -1, "")
		self.button_graphfile = wx.Button(self, -1, "open")
		self.label_gmail = wx.StaticText(self, -1, "gmail: ", style=wx.ALIGN_RIGHT)
		self.text_ctrl_gmail = wx.TextCtrl(self, -1, "")
		self.label_passwd = wx.StaticText(self, -1, "passwd: ", style=wx.ALIGN_RIGHT)
		self.text_ctrl_passwd = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
		self.label_album = wx.StaticText(self, -1, "album name: ", style=wx.ALIGN_RIGHT)
		self.text_ctrl_album = wx.TextCtrl(self, -1, "")
		self.label_photo = wx.StaticText(self, -1, "photo name: ", style=wx.ALIGN_RIGHT)
		self.text_ctrl_photo = wx.TextCtrl(self, -1, "")
		self.label_checkbox = wx.StaticText(self, -1, "periodic")
		self.checkbox_1 = wx.CheckBox(self, -1, "")
		self.label_interval = wx.StaticText(self, -1, "interval")
		self.combo_box_1 = wx.ComboBox(self, -1, choices=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "30", "60", "90", "120"], style=wx.CB_DROPDOWN)
		self.label_last = wx.StaticText(self, -1, "last upload")
		self.text_ctrl_last = wx.TextCtrl(self, -1, "")
		self.button_connect = wx.Button(self, -1, "connect")
		self.text_area = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
		self.button_start = wx.Button(self, -1, "start")
		self.button_stop = wx.Button(self, -1, "stop")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_button_datafile_pressed, self.button_datafile)
		self.Bind(wx.EVT_BUTTON, self.on_button_graphfile_pressed, self.button_graphfile)
		self.Bind(wx.EVT_BUTTON, self.on_button_connect_pressed, self.button_connect)
		self.Bind(wx.EVT_BUTTON, self.on_button_start_pressed, self.button_start)
		self.Bind(wx.EVT_BUTTON, self.on_button_stop_pressed, self.button_stop)
		# end wxGlade
		self.LoadInitials(self.picklefile)
		self.Bind(wx.EVT_CLOSE, self.on_close)
		self.BindEvent(EVT_MSG_ID, self.on_msg)
		self.thread = None
	
	def __set_properties(self):
		# begin wxGlade: MainFrame.__set_properties
		self.SetTitle("Upload to Picasa")
		self.SetSize((470, 320))
		self.SetBackgroundColour(wx.Colour(225, 225, 225))
		self.statusbar.SetStatusWidths([-1])
		# statusbar fields
		statusbar_fields = [""]
		for i in range(len(statusbar_fields)):
		    self.statusbar.SetStatusText(statusbar_fields[i], i)
		self.text_ctrl_datafile.SetMinSize((230, 20))
		self.button_datafile.SetMinSize((50, 20))
		self.text_ctrl_graphfile.SetMinSize((230, 20))
		self.button_graphfile.SetMinSize((50, 20))
		self.text_ctrl_gmail.SetMinSize((180, 20))
		self.text_ctrl_passwd.SetMinSize((180, 20))
		self.text_ctrl_album.SetMinSize((180, 20))
		self.text_ctrl_photo.SetMinSize((180, 20))
		self.label_checkbox.SetMinSize((37, 13))
		self.combo_box_1.SetMinSize((50, 21))
		self.combo_box_1.SetSelection(-1)
		self.text_ctrl_last.SetMinSize((110, 20))
		self.button_connect.SetMinSize((75, 20))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MainFrame.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_bottom = wx.BoxSizer(wx.HORIZONTAL)
		sizer_bottom_right = wx.BoxSizer(wx.VERTICAL)
		sizer_middle_lower = wx.BoxSizer(wx.HORIZONTAL)
		sizer_middle_right = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_3 = wx.FlexGridSizer(3, 2, 0, 0)
		grid_sizer_1 = wx.FlexGridSizer(4, 2, 0, 0)
		grid_sizer_2 = wx.FlexGridSizer(2, 3, 0, 0)
		grid_sizer_2.Add(self.label_datafile, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
		grid_sizer_2.Add(self.text_ctrl_datafile, 0, wx.TOP|wx.BOTTOM, 4)
		grid_sizer_2.Add(self.button_datafile, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
		grid_sizer_2.Add(self.label_graphfile, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
		grid_sizer_2.Add(self.text_ctrl_graphfile, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_2.Add(self.button_graphfile, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 8)
		sizer_2.Add(grid_sizer_2, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(self.label_gmail, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
		grid_sizer_1.Add(self.text_ctrl_gmail, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_1.Add(self.label_passwd, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
		grid_sizer_1.Add(self.text_ctrl_passwd, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_1.Add(self.label_album, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
		grid_sizer_1.Add(self.text_ctrl_album, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_1.Add(self.label_photo, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
		grid_sizer_1.Add(self.text_ctrl_photo, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_middle_lower.Add(grid_sizer_1, 5, wx.EXPAND, 0)
		grid_sizer_3.Add(self.label_checkbox, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
		grid_sizer_3.Add(self.checkbox_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
		grid_sizer_3.Add(self.label_interval, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 2)
		grid_sizer_3.Add(self.combo_box_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
		grid_sizer_3.Add(self.label_last, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
		grid_sizer_3.Add(self.text_ctrl_last, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
		sizer_middle_right.Add(grid_sizer_3, 2, wx.EXPAND, 0)
		sizer_middle_right.Add(self.button_connect, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
		sizer_middle_lower.Add(sizer_middle_right, 3, 0, 0)
		sizer_2.Add(sizer_middle_lower, 2, wx.EXPAND, 0)
		sizer_bottom.Add(self.text_area, 2, wx.ALL|wx.EXPAND, 10)
		sizer_bottom_right.Add(self.button_start, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
		sizer_bottom_right.Add(self.button_stop, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
		sizer_bottom.Add(sizer_bottom_right, 1, wx.EXPAND, 0)
		sizer_2.Add(sizer_bottom, 2, wx.EXPAND, 0)
		sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_1)
		self.Layout()
		# end wxGlade

	def on_button_datafile_pressed(self, event): # wxGlade: MainFrame.<event_handler>
		dlg = wx.FileDialog(self, message="Choose a file", defaultDir=os.getcwd(), wildcard='*.dat')
		if dlg.ShowModal() == wx.ID_OK:
			filename = dlg.GetPath() # get the new filename from the dialog
		else:
			filename = None
		
		if filename:
			self.text_ctrl_datafile.SetValue(filename)
		dlg.Destroy()  # best to do this sooner than later

	def on_button_graphfile_pressed(self, event): # wxGlade: MainFrame.<event_handler>
		dlg = wx.FileDialog(self, message="Choose a file", defaultDir=os.getcwd(), wildcard='*.png')
		if dlg.ShowModal() == wx.ID_OK:
			filename = dlg.GetPath() # get the new filename from the dialog
		else:
			filename = None
		
		if filename:
			self.text_ctrl_graphfile.SetValue(filename)
		dlg.Destroy()  # best to do this sooner than later
	
	def on_button_start_pressed(self, event): # wxGlade: MainFrame.<event_handler>
		'''If the periodic uploading is configured, check whether there is already a working thread.
		If there is, check the state of the thread. Restart it if necessary.
		If the periodic uploading is not configured, just upload the file once'''
		# if the 'periodic' is checked
		if self.checkbox_1.GetValue():
			# if there is no working thread
			if not self.thread:
				self.thread = UploadThread(self)
				#self.logging('New thread created')
			else: # if there is a thread
				# if the thread is running
				s = self.thread._state
				if s == UploadThread.State_Run:
					dlg = wx.MessageDialog(self, 'There is a running thread.', 
					'Message', wx.OK | wx.ICON_INFORMATION)
					if dlg.ShowModal() == wx.ID_OK:
						pass
					dlg.Destroy()
				# if it is aborted or terminated
				elif s == UploadThread.State_Abort or s == UploadThread.State_Term:
					dlg = wx.MessageDialog(self, 'Do you want to restart the thread?', 
					'Message', wx.OK | wx.CANCEL |wx.ICON_INFORMATION)
					if dlg.ShowModal() == wx.ID_OK:
						self.thread.restart()
					dlg.Destroy()
		else: # if unchecked
			self.UploadFile()
	
	def on_button_stop_pressed(self, event): # wxGlade: MainFrame.<event_handler>
		'''Abort the running thread'''
		if self.thread:
			self.thread.abort()
	
	def on_button_connect_pressed(self, event): # wxGlade: MainFrame.<event_handler>
		'''Login to the Google Account'''
		self.Login2Google()
	
	def on_msg(self, event):
		'''Show message'''
		if event.msg:
			self.statusbar.SetStatusText(event.msg)
			
	def on_close(self, event):
		if self.thread:
			self.thread.terminate()
			# while self.thread.isAlive(): 
				# time.sleep(0.1)
			self.thread.join()
		
		f = open(self.picklefile, 'w')
		d = {}
		d['datafile'] = self.text_ctrl_datafile.GetValue()
		d['figfile'] = self.text_ctrl_graphfile.GetValue()
		d['gmail'] = self.text_ctrl_gmail.GetValue()
		d['passwd'] = self.text_ctrl_passwd.GetValue()
		d['album'] = self.text_ctrl_album.GetValue()
		d['photo'] = self.text_ctrl_photo.GetValue()
		d['periodic'] = self.checkbox_1.GetValue()
		d['interval'] = self.combo_box_1.GetValue()
		pickle.dump(d, f)
		f.close
		self.Destroy()
		
	def Login2Google(self):
		addr = self.text_ctrl_gmail.GetValue()
		passwd = self.text_ctrl_passwd.GetValue()
		if addr == '' or passwd == '':
			self.logging('Invalid address or password')
			err = LoginError()
			raise err
		else:
			try:
				self.gd = upload2picasa.Login(addr, passwd)
			except BadAuthentication:
				self.logging('Login Failed')
				err = LoginError()
				raise err
			else:
				self.logging('Logged in Successfully')
	
	def UploadFile(self):
		logfile = self.text_ctrl_datafile.GetValue()
		figfile = self.text_ctrl_graphfile.GetValue()
		addr = self.text_ctrl_gmail.GetValue()
		try:
			date, T1, T2 = plotlog.ReadLogFile(logfile)
		except plotlog.NofileError as e:
			self.logging(str(e))
			return 0
		self.logging('Generating graph ... ', False)
		plotlog.PlotLog(date, T1, T2, ('chamber', 'flange'), {'enable':True, 'file':figfile})
		self.logging('Done')
	
		if not 'gd' in self.__dict__:
			try:
				self.Login2Google()
			except LoginError:
				return 0
		
		album = self.text_ctrl_album.GetValue()
		photo = self.text_ctrl_photo.GetValue()
		if album == '' or photo == '':
			self.logging('album or photo not specified')
			return 0
		timestr = time.strftime('%d/%m/%Y %H:%M:%S')
		desc = 'Uploaded on %s' % timestr
		username =  re.compile(r'(.*)(@gmail.com)').search(addr).group(1)
		p = upload2picasa.UploadPhoto(self.gd, username, album, photo, figfile, desc)
		self.text_ctrl_last.SetValue(timestr)
		return 1
	
	def BindEvent(self, id, func):
		self.Connect(-1, -1, id, func)
	
	def LoadInitials(self, file):
		try:
			f = open(file, 'r')
		except IOError:
			return
		else:
			try:
				d = pickle.load(f) # it is a dictionary whose keys are name of the fields
			except EOFError:
				return
			else:
				self.text_ctrl_datafile.SetValue(d['datafile'])
				self.text_ctrl_graphfile.SetValue(d['figfile'])
				self.text_ctrl_gmail.SetValue(d['gmail'])
				self.text_ctrl_passwd.SetValue(d['passwd'])
				self.text_ctrl_album.SetValue(d['album'])
				self.text_ctrl_photo.SetValue(d['photo'])
				self.checkbox_1.SetValue(d['periodic'])
				self.combo_box_1.SetValue(d['interval'])
		f.close()
	
	def logging(self, string, linefeed=True):
		if linefeed and string[-1] != '\n':
			string += '\n'
		self.text_area.AppendText(string)

# end of class MainFrame


class UploadApp(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()
		self.frame = MainFrame(None, -1, "")
		self.SetTopWindow(self.frame)
		self.frame.Show()
		return 1
	
	def write(self, string):
		self.frame.text_area.AppendText(string)
	
	

# end of class UploadApp

if __name__ == "__main__":
	app = UploadApp(0)
	sys.stdout = app # redirect stdout to text area
	app.MainLoop()
